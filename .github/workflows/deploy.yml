name: Python CI/CD with DockerHub

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Copy .env from GitHub Secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest

      - name: Deploy on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # .env 파일 EC2로 복사
          scp -i private_key.pem -o StrictHostKeyChecking=no .env $USER@$HOST:/home/$USER/.env

          # EC2에서 배포 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << EOF
            docker pull "$DOCKER_HUB_USERNAME/myapp:latest"
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp --env-file /home/$USER/.env -p 8080:8080 "$DOCKER_HUB_USERNAME/myapp:latest"
          EOF

